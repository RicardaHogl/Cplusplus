EX 1.1 (Error Messages)

a) Remove the semicolon after int somenumber.
Error message:

C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(9,2): error C2146: Syntaxfehler: Fehlendes ";" vor Bezeichner "cout"

b) Remove the closing quotation mark from Enter a number:.
Error message:

C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(9,10): error C2001: Zeilenvorschub in Konstante.
C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(10,2): error C2146: Syntaxfehler: Fehlendes ";" vor Bezeichner "cin"



c) Comment out the line using namespace std;.
Error message:

C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(9,2): error C2065: "cout": nichtdeklarierter Bezeichner
C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(10,2): error C2065: "cin": nichtdeklarierter Bezeichner
C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(11,2): error C2065: "cout": nichtdeklarierter Bezeichner



d) Add the modifier const before int someNumber (and thus declare a constant).
Error message:

C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(8,22): error C2734: "someNumber": "const"-Objekt muss initialisiert werden, wenn es nicht extern ist
C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(10,19): error C2678: Binärer Operator ">>": Es konnte kein Operator gefunden werden, der einen linksseitigen Operanden vom Typ "std::istream" akzeptiert (oder keine geeignete Konvertierung möglich)


UNIX Fehlerausgaben:
a)
main.cpp:4:18: error: expected ';' at end of declaration
  int  someNumber
                 ^
                 ;
1 error generated.

b)
main.cpp:5:12: warning: missing terminating '"' character [-Winvalid-pp-token]
  cout  << "Enter a number: ;
           ^
main.cpp:5:12: error: expected expression


c)
main.cpp:5:3: error: use of undeclared identifier 'cout'; did you mean 'std::cout'?
  cout  << "Enter a number: ";
  ^~~~
  std::cout
/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/iostream:53:33: note: 'std::cout' declared here
extern _LIBCPP_FUNC_VIS ostream cout;
                                ^
main.cpp:6:3: error: use of undeclared identifier 'cin'; did you mean 'std::cin'?
  cin  >> someNumber;
  ^~~
  std::cin
/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/iostream:49:33: note: 'std::cin' declared here
extern _LIBCPP_FUNC_VIS istream cin;
                                ^
main.cpp:7:3: error: use of undeclared identifier 'cout'; did you mean 'std::cout'?
  cout  << (someNumber /2);
  ^~~~
  std::cout
/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/iostream:53:33: note: 'std::cout' declared here
extern _LIBCPP_FUNC_VIS ostream cout;
                                ^
3 errors generated.

d)
main.cpp:4:14: error: default initialization of an object of const type
      'const int'
  const int  someNumber;
             ^
                        = 0
main.cpp:6:8: error: invalid operands to binary expression ('std::__1::istream'
      (aka 'basic_istream<char>') and 'const int')
  cin  >> someNumber;
  ~~~  ^  ~~~~~~~~~~

e)
main.cpp:1:11: fatal error: 'iostream.h' file not found
#include  <iostream.h>
          ^~~~~~~~~~~~
1 error generated.




-------ab hier alles messages----
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(301,39): message : kann "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(std::basic_streambuf<char,std::char_traits<char>> *)" sein
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(297,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(void *&)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(293,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(long double &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(289,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(double &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(285,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(float &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(281,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(unsigned __int64 &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(277,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(__int64 &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(273,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(unsigned long &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(269,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(long &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(265,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(unsigned int &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(257,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(int &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(253,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(unsigned short &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(221,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(short &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(217,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(bool &)"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(188,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(std::ios_base &(__cdecl *)(std::ios_base &))"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(183,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(std::basic_ios<char,std::char_traits<char>> &(__cdecl *)(std::basic_ios<char,std::char_traits<char>> &))"
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\istream(178,39): message : oder "std::basic_istream<char,std::char_traits<char>> &std::basic_istream<char,std::char_traits<char>>::operator >>(std::basic_istream<char,std::char_traits<char>> &(__cdecl *)(std::basic_istream<char,std::char_traits<char>> &))"
C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(10,19): message : oder "integrierter C++-Operator>>(int, int)"
C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(10,19): message : bei Anpassung der Argumentliste "(std::istream, const int)"


e) Change iostream to iostream.h.
Error message:

C:\Users\Ricarda\source\repos\Cplusplus\Sheet1\ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.cpp(4,10): fatal error C1083: Datei (Include) kann nicht geöffnet werden: "iostream.h": No such file or directory


Based on your observations, decide which error to look at first
if there are multiple errors!
Answer:
After a fatal error, the other errors won't be detected before we fix the cause for the fatal error, so we naturally have to look at the fatal errors before we can detect the other errors.
Otherwise, fixing the errors starting from the top (in terms of code execution) will resolve some of the error messages in lower lines automatically when fixing an error in the line above.


EX 1.2 (Type conversion)
Where do you see a possible risk?

Answer:

Possible risks:
i) i = l+90;
- integer i has value range [-2147483648, ..., 2147483647]
- long l has value range: [-(2^63), ...,(2^63)-1]
-> long has a larger value range than integer
-> l could be a number which can not be correct represented as integer,
   therefore it is also possible that l+90 can not be represented correctly
e.g.: l = 2147483649 -> cout << i = -2147483557 (overflow)

ii) b = d;
- char b has value range [-128, ..., 127]
- double d is a 64 bit floating point number with value range [-1.797693 x 10^(308), 1.797693 x 10^(308)]
-> d could be a number which can not be represented correctly as char
e.g.: d = 2.5 -> cout << double(b) = 2 (cut off decimal places = loss of precision)
      or d = 128.0 -> cout << double(b) = -128 (overflow)

iii) a = i;
- char a has value range [-128, ..., 127]
- integer i has value range [-2147483648, ..., 2147483647]
-> integer has a larger value range than char
-> i could be a number which can not be represented correctly as char
e.g.: i = 128 -> cout << int(a) = -128 (overflow)

iv) i = d;
- integer i has value range [-2147483648, ..., 2147483647]
- double d is a 64 bit floating point number with value range [-1.797693 x 10^(308), 1.797693 x 10^(308)]
  numbers <(-2147483648) or >2147483647
-> d could be a number which can not be represented correctly as integer
e.g.: d = 2.5 -> cout << i = 2 (cut off decimal places = loss of precision)
      or d = 2150000000.0 -> cout << i = -2147483648 (overflow)

The other assignments should be fine:
l = i; -> both are integers and long has larger value range
d = f; -> both are floating point numbers and double has larger value range
f = s; -> there are integers, which can not be represented correctly by floats,
          but the smallest of them is (+/-)16777217 (represented as +1: (+/-)16777218),
          so the short value range [-128, 127] can be represented correctly,
          whereas f=i; or f=l; would have some risks


Ricardas Answer:
i = l+90; //because we can store longer numbers in a long than in int
//f = s; // because we can't just interpret a short as floating point number without explicit conversion
b = d; //because we can store more data in a double than in a char and so data will be lost (even with conversion)
a = i; //an int can store more data than a char
i = d; //because we lose the information after the comma, and even the rounded number might be too big to fit in an int (due to the floating point format).



Ex 1.4 (Running through an algorithm)
a = 65, b = 25, Compute ggT(65,25)

Answer:

As in the lecture slides:
ggT(65,25)  ->  65 > 25: ggT((65-25)=40, 25)
                40 > 25: ggT((40-25)=15, 25)
                25 > 15: ggT(15, (25-15)=10)
                15 > 10: ggT((15-10)=5, 10)
                10 > 5: ggT(5, (10-5)=5)
                5 == 5: 5

More detailed:
Call ggT(65,25)
Check 65 == 25: false
Check 65 > 25: true
Compute 65-25 = 40
Call ggT(40, 25)
Check 40 == 25: false
Check 40 > 25: true
Compute 40-25 = 15
Call ggT(15,25)
Check 15 == 25: false
Check 15 > 25: false
Check 15 < 25: true
Compute 25-15 = 10
Call ggT(15,10)
Check 15 == 10: false
Check 15 > 10: true
Compute 15-10 = 5
Call ggT(5,10)
Check 5 == 10: false
Check 5 > 10: false
Check 5 < 10: true
Compute 10-5 = 5
Call ggT(5,5)
Check 5 == 5: true
Return 5
