# Ex 3.1 (Blocks, statements and loops)

a) Compile the given programs in Listing 1 and Listing 2 with and explain the errors that occur or
   the resulting behavior when you run the program.

   Answer:
   For both: Variables are always in the (whole) inner block (defined by {}) visible/alive,
             in which they are declared. This means also: If after the declaration follow
             other blocks within the block of the declaration, than the variable is there
             also visible/alive.

   Listing 1: We get an error about use of undeclared identifier 'j' respect to
              i = j in line 8. We get this error because j is declared in line 6
              within a brackets block {}. Therefore the lifetime of j is only
              within {} and it is not visible outside the block.

   Listing 2: We get as output i=3. The variable i is declares outside/before the
              brackets block, so it is visible and 'alive' both within and outside
              the block. Thats why the change to 3 within the block is also visible
              outside/after the block.


b) What is the value of the variable x after the execution of the respective if statement?

   Answer:
   Listing 3: x=8, because:
              In the beginning x=5, therefore the if-condition is true and we add 3
              (5>1 and 5<10, so it is fulfilled that 'at least one of them is true').

   Listing 4: x=7, because:
              The outer and the inner if-statements are true, because x=1 holds
              x>=1 and x<=1. Therefore the inner if-body was run and x is 7.

   Listing 5: x=-1, because:
              The outer is condition is false (x=10 is not greater than 10),
              thus the else-body was run and x is -1.


c) What is the value of the variable sum after the execution of the loop?

   Answer:
   Listing 6: sum=12, because:
              The while loop runs three times and we get sum = 0 + 6 + 4 + 2 = 12.

   Listing 7: sum=6, because:
              The do-body runs one time, after that value 9 is not smaller than 8.
              Therefore sum = 0 + 6 = 6.

   Listing 8: sum=27, because:
              The for-body runs 3 times (for index values 0, 3, 6),
              thus the sum is 0 + 6 + 9 + 12 = 27.


# Ex 3.5 (Pointer Panic)

i) What is the difference between sizeof(funnyNumbers) and sizeof(*funnyNumbers)?

   Answer:
   sizeof(funnyNumbers):
   Size of the pointer, which means the address, where he points to.
   For our compiler this would be 4 for all (normal) pointers.

   sizeof(*funnyNumbers):
   Size of the element, the pointer points to. So here it is the first element of
   an integer array, for which we get the 32bit integer size 4.

ii) Try to find out what this program does.

    Answer:
		We use an int-array to store the least significant byte of four integers in each array cell (that would usually hold one 4 byte int). Since the numbers from 1 to 20 all fit into the least significant byte, we write to the storage:  (1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16),(17,18,19,20) (with each "tupel" being representative of one array cell).
		But when we read from the storage in the second for-loop, we interpret each block of bytes as big endian integer, with the least significant byte (holding char 4,8,12,16,20) stored at the front. So we read the following content from the storage (first given as the original char values): (4,3,2,1),(8,7,6,5),(12,11,10,9),(16,15,14,13),(20,19,18,17) with each "tupel" being interpreted as a single integer.
		Below, we give these values as the bitstring and as the integer that is finally output in this for loop:

    00000100 00000011 00000010 00000001 -> 67305985
    00001000 00000111 00000110 00000101 -> 134678021
    00001100 00001011 00001010 00001001 -> 202050057
    00010000 00001111 00001110 00001101 -> 269422093
    00010100 00010011 00010010 00010001 -> 336794129

Our more detailed explanation of what has happened (in German):
 ( char*) funnyNumbers # interpretiere/caste den Intpointer als charpointer
 (( char*) funnyNumbers + i) # gehe im Array an den Beginn des i'ten chars (genauer: berechne die Adresse davon)
 ( int*) (( char*) funnyNumbers + i) # wir kreieren/casten einen int-Pointer zu dieser Adresse 
 *( int*) (( char*) funnyNumbers + i)=c; # und speichere an diese Adresse den Integer c. Im nächsten Schleifendurchlauf werden die höherwertigen drei Bytes dieses Integers überschrieben.
 
 Dadurch ergibt sich, wenn z.B. in funnyNumbers die Adresse 0xF000 gespeichert ist, für i=2:
 (( char*) funnyNumbers + i) = Speicherbereich [0xF002,0xF003)
 ( int*) (( char*) funnyNumbers + i) = Speicherbereich [0xF002,0xF006)
 *( int*) (( char*) funnyNumbers + i) speichere das Int rechts vom Gleichheitszeichen in die Speicherstellen 0xF002,0xF003,0xF004,0xF005
 für int c=42 mit Binärcode 00000000 00000000 00000000 00101010 wird also das folgende gespeichert: 0xF002: 10100010 0xF003: 00000000 0xF004: 00000000 0xF005: 00000000.
 Sobald i im nächsten Durchlauf der Schleife eins höher springt, wird der Speicherbereich von 0xF003-0xF006 mit einem int beschrieben usw., bis alles gefüllt ist.