# Ex 3.1 (Blocks, statements and loops)

a) Compile the given programs in Listing 1 and Listing 2 with and explain the errors that occur or
   the resulting behavior when you run the program.

   Answer:
   For both: Variables are always in the (whole) inner block (defined by {}) visible/alive,
             in which they are declared. This means also: If after the declaration follow
             other blocks within the block of the declaration, than the variable is there
             also visible/alive.

   Listing 1: We get an error about use of undeclared identifier 'j' respect to
              i = j in line 8. We get this error because j is declared in line 6
              within a brackets block {}. Therefore the lifetime of j is only
              within {} and it is not visible outside the block.

   Listing 2: We get as output i=3. The variable i is declares outside/before the
              brackets block, so it is visible and 'alive' both within and outside
              the block. Thats why the change to 3 within the block is also visible
              outside/after the block.


b) What is the value of the variable x after the execution of the respective if statement?

   Answer:
   Listing 3: x=8, because:
              In the beginning x=5, therefore the if-condition is true and we add 3
              (5>1 and 5<10, so it is fulfilled that 'at least one of them is true').

   Listing 4: x=7, because:
              The outer and the inner if-statements are true, because x=1 holds
              x>=1 and x<=1. Therefore the inner if-body was run and x is 7.

   Listing 5: x=-1, because:
              The outer is condition is false (x=10 is not greater than 10),
              thus the else-body was run and x is -1.


c) What is the value of the variable sum after the execution of the loop?

   Answer:
   Listing 6: sum=12, because:
              The while loop runs three times and we get sum = 0 + 6 + 4 + 2 = 12.

   Listing 7: sum=6, because:
              The do-body runs one time, after that value 9 is not smaller than 8.
              Therefore sum = 0 + 6 = 6.

   Listing 8: sum=27, because:
              The for-body runs 3 times (for index values 0, 3, 6),
              thus the sum is 0 + 6 + 9 + 12 = 27.


# Ex 3.5 (Pointer Panic)

i) What is the difference between sizeof(funnyNumbers) and sizeof(*funnyNumbers)?

   Answer:
   sizeof(funnyNumers):
   Size of the pointer, which means the address, where he points to.
   For our compiler this would be 4 for all (normal) pointers.

   sizeof(*funnyNumbers):
   Size of the element, the pointer points to. So here it is the first element of
   an integer array, for which we get the 32bit integer size 4.

ii) Try to find out what this program does.

    Answer:
		We use an intarray to store 4 chars in each cell, so we write [(1|2|3|4),(5,6,7,8),(9,10,11,12),(13,14,15,16),(17,18,19,20)], but when the chars get interpreted as integers again in the second for loop, the total output will be 
		0000 0001 0000 0010 0000 0011 0000 0100 -> 16.909.060,
		0000 0101 0000 0110 0000 0111 0000 1000 -> 84.281.096,
		0000 1001 0000 1010 0000 1011 0000 1100 -> 151.653.132,
		0000 1101 0000 1110 0000 1111 0001 0000 -> 219.025.168,
		0001 0001 0001 0010 0001 0011 0001 0100 -> 286.397.204