# 4.1 Recursion vs. Iteration

a) Listing 1

(i) What would happen if the depth of recursion were not constrained? Will line 11 ever be reached?
    Answ.:
    Line 11 would never be reached, because there is no termination condition
    within the recursive function endless(). Therefore the program would run in an
    endless loop by calling endless(1) in line 10, if the depth of recursion
    were not constrained.

(ii) Compile and run the program. How many times will endless() be executed?
     Write down your result!
     Answ.:
     endless() will be executed n = 262040 times, than the program runs in a
     segmentation fault caused by the stack overflow.

(iii) Add the line
      har memoryOnStack [1000];
      before the return statement in endless and execute the program. What has changed?
      Answ.:
      The program overflow the stack much faster since we need to allocate
      a new 1000-byte-Array in every call. Now endless() will be executed only
      n = 7940 times until the segmentation fault occur.

(iv) Delete the newly inserted line again and run the program a second time.
     Do you get the same result as before?
     Answ.:
     endless() was executes n = 262040 times, so we have the same result
     as before in (ii). The result of (iii) has no effect, because the code
     was new compiled.


# 4.2 (Depths of the recursion)

    Example a):
    line 3: There is no termination condition specified, so the program will run
    in a segmentation fault.
    Correction:
    if (n>0) {
      m += functionA(n-1)*0.5;
    }

    Example b):
    line 4: We always call function B with the same parameter, so even though we
    specify an termination condition, it will not be reached.
    Correction:
    return 2 + functionB(n-1);
    (we should also change line 2 if(n==0) to if(n<=0), so that negative input
    will not run in an error)

    Example c)
    1. line 2: the termination condition if(n == 0) can just be reached for input 0, otherwise
       the execution of functionC leads to a stack overflow
       Correction:
       Change if(n == 0) to if(n <= 0)
    2. line 4: We calculate functionC(n-1) recursively two times.
       Better:
       i) Just calculate it once, store this value in a variable and use this
       variable twice.
       ii) Just write: 2*functionC(n-1) + functionC(n-2);
       iii) Another strategy would be to use dynamic programming (which even prevents
       repeated functionC(n-2) calls). This solution might need more storage space,
       but that way we only need to calculate each functionC(k) once instead of two
       or three times, and look this value up in subsequent calls.




# 4.3 (Real world objects)
      Define the two real world objects printer and RollerSkates. Specify at least 4
      attributes and 4 methods for each object.

      Answ.:
      (more detailed version below)
      printer:
        attributes:
          - serial number
          - depth, width, height, weight
          - ink_level
          - state
          - no_paper
          - job_queue
        methods:
          - check_ink_level
          - change_state
          - check_paper
          - receive_data
          - print
          - raise_warnings

      RollerSkates:
        attributes:
          - name
          - size
          - color
          - targetgroup
          - wheels
          - has_shoelace
          - driving_direction
          - current_speed
        methods:
          - choose_driving_direction
          - brake
          - accelerate
          - change_wheels


      More detailed:
      printer:
        attributes:
          - string serial number
          - double depth, width, height, weight
          - int ink_level
          - enum Printerstates {off, power up, ready, printing, error} state
          - bool no_paper
          - string[] job_queue
        methods:
          - bool check_ink_level(int ink_level)  // ink_level is good/bad
          - void change_state(Printerstate target_state)
          - void check_paper() // change no_paper attribute
          - void receive_data(string data) // add data to job queue
          - void print()
          - void raise_warnings() // did some checks and print errors

      RollerSkates:
        attributes:
          - string name
          - string size
          - enum color
          - enum Targetgroups{woman, man, unisex, girl, boy} targetgroup
          - Wheels wheels  // some specification about the wheels
          - bool has_shoelace
          - enum Directions{forward, backward} driving_direction
          - float current_speed
        methods:
          - void choose_driving_direction(enum Directions direction) // if current speed = 0, you can choose direction
          - void brake(float speed_change) //decrease current speed
          - void accelerate(float speed_change) //increase current speed
          - void change_wheels(Wheels wheels) // e.g. if buying the newest cool wheels
